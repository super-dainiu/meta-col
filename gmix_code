


def forward(self, x):
    stem_proj = self.stem.proj(x);  x = None
    flatten = stem_proj.flatten(2);  stem_proj = None
    transpose = flatten.transpose(1, 2);  flatten = None
    stem_norm = self.stem.norm(transpose);  transpose = None
    blocks_0_norm1 = getattr(self.blocks, "0").norm1(stem_norm)
    transpose_1 = blocks_0_norm1.transpose(1, 2);  blocks_0_norm1 = None
    blocks_0_mlp_tokens_fc1 = getattr(self.blocks, "0").mlp_tokens.fc1(transpose_1);  transpose_1 = None
    chunk = blocks_0_mlp_tokens_fc1.chunk(2, dim = -1);  blocks_0_mlp_tokens_fc1 = None
    getitem = chunk[0]
    getitem_1 = chunk[1];  chunk = None
    blocks_0_mlp_tokens_act = getattr(self.blocks, "0").mlp_tokens.act(getitem_1);  getitem_1 = None
    mul = getitem * blocks_0_mlp_tokens_act;  getitem = blocks_0_mlp_tokens_act = None
    blocks_0_mlp_tokens_drop1 = getattr(self.blocks, "0").mlp_tokens.drop1(mul);  mul = None
    blocks_0_mlp_tokens_fc2 = getattr(self.blocks, "0").mlp_tokens.fc2(blocks_0_mlp_tokens_drop1);  blocks_0_mlp_tokens_drop1 = None
    blocks_0_mlp_tokens_drop2 = getattr(self.blocks, "0").mlp_tokens.drop2(blocks_0_mlp_tokens_fc2);  blocks_0_mlp_tokens_fc2 = None
    transpose_2 = blocks_0_mlp_tokens_drop2.transpose(1, 2);  blocks_0_mlp_tokens_drop2 = None
    blocks_0_drop_path = getattr(self.blocks, "0").drop_path(transpose_2);  transpose_2 = None
    add = stem_norm + blocks_0_drop_path;  stem_norm = blocks_0_drop_path = None
    blocks_0_norm2 = getattr(self.blocks, "0").norm2(add)
    blocks_0_mlp_channels_fc1 = getattr(self.blocks, "0").mlp_channels.fc1(blocks_0_norm2);  blocks_0_norm2 = None
    chunk_1 = blocks_0_mlp_channels_fc1.chunk(2, dim = -1);  blocks_0_mlp_channels_fc1 = None
    getitem_2 = chunk_1[0]
    getitem_3 = chunk_1[1];  chunk_1 = None
    blocks_0_mlp_channels_act = getattr(self.blocks, "0").mlp_channels.act(getitem_3);  getitem_3 = None
    mul_1 = getitem_2 * blocks_0_mlp_channels_act;  getitem_2 = blocks_0_mlp_channels_act = None
    blocks_0_mlp_channels_drop1 = getattr(self.blocks, "0").mlp_channels.drop1(mul_1);  mul_1 = None
    blocks_0_mlp_channels_fc2 = getattr(self.blocks, "0").mlp_channels.fc2(blocks_0_mlp_channels_drop1);  blocks_0_mlp_channels_drop1 = None
    blocks_0_mlp_channels_drop2 = getattr(self.blocks, "0").mlp_channels.drop2(blocks_0_mlp_channels_fc2);  blocks_0_mlp_channels_fc2 = None
    blocks_0_drop_path_1 = getattr(self.blocks, "0").drop_path(blocks_0_mlp_channels_drop2);  blocks_0_mlp_channels_drop2 = None
    add_1 = add + blocks_0_drop_path_1;  add = blocks_0_drop_path_1 = None
    blocks_1_norm1 = getattr(self.blocks, "1").norm1(add_1)
    transpose_3 = blocks_1_norm1.transpose(1, 2);  blocks_1_norm1 = None
    blocks_1_mlp_tokens_fc1 = getattr(self.blocks, "1").mlp_tokens.fc1(transpose_3);  transpose_3 = None
    chunk_2 = blocks_1_mlp_tokens_fc1.chunk(2, dim = -1);  blocks_1_mlp_tokens_fc1 = None
    getitem_4 = chunk_2[0]
    getitem_5 = chunk_2[1];  chunk_2 = None
    blocks_1_mlp_tokens_act = getattr(self.blocks, "1").mlp_tokens.act(getitem_5);  getitem_5 = None
    mul_2 = getitem_4 * blocks_1_mlp_tokens_act;  getitem_4 = blocks_1_mlp_tokens_act = None
    blocks_1_mlp_tokens_drop1 = getattr(self.blocks, "1").mlp_tokens.drop1(mul_2);  mul_2 = None
    blocks_1_mlp_tokens_fc2 = getattr(self.blocks, "1").mlp_tokens.fc2(blocks_1_mlp_tokens_drop1);  blocks_1_mlp_tokens_drop1 = None
    blocks_1_mlp_tokens_drop2 = getattr(self.blocks, "1").mlp_tokens.drop2(blocks_1_mlp_tokens_fc2);  blocks_1_mlp_tokens_fc2 = None
    transpose_4 = blocks_1_mlp_tokens_drop2.transpose(1, 2);  blocks_1_mlp_tokens_drop2 = None
    blocks_1_drop_path = getattr(self.blocks, "1").drop_path(transpose_4);  transpose_4 = None
    add_2 = add_1 + blocks_1_drop_path;  add_1 = blocks_1_drop_path = None
    blocks_1_norm2 = getattr(self.blocks, "1").norm2(add_2)
    blocks_1_mlp_channels_fc1 = getattr(self.blocks, "1").mlp_channels.fc1(blocks_1_norm2);  blocks_1_norm2 = None
    chunk_3 = blocks_1_mlp_channels_fc1.chunk(2, dim = -1);  blocks_1_mlp_channels_fc1 = None
    getitem_6 = chunk_3[0]
    getitem_7 = chunk_3[1];  chunk_3 = None
    blocks_1_mlp_channels_act = getattr(self.blocks, "1").mlp_channels.act(getitem_7);  getitem_7 = None
    mul_3 = getitem_6 * blocks_1_mlp_channels_act;  getitem_6 = blocks_1_mlp_channels_act = None
    blocks_1_mlp_channels_drop1 = getattr(self.blocks, "1").mlp_channels.drop1(mul_3);  mul_3 = None
    blocks_1_mlp_channels_fc2 = getattr(self.blocks, "1").mlp_channels.fc2(blocks_1_mlp_channels_drop1);  blocks_1_mlp_channels_drop1 = None
    blocks_1_mlp_channels_drop2 = getattr(self.blocks, "1").mlp_channels.drop2(blocks_1_mlp_channels_fc2);  blocks_1_mlp_channels_fc2 = None
    blocks_1_drop_path_1 = getattr(self.blocks, "1").drop_path(blocks_1_mlp_channels_drop2);  blocks_1_mlp_channels_drop2 = None
    add_3 = add_2 + blocks_1_drop_path_1;  add_2 = blocks_1_drop_path_1 = None
    blocks_2_norm1 = getattr(self.blocks, "2").norm1(add_3)
    transpose_5 = blocks_2_norm1.transpose(1, 2);  blocks_2_norm1 = None
    blocks_2_mlp_tokens_fc1 = getattr(self.blocks, "2").mlp_tokens.fc1(transpose_5);  transpose_5 = None
    chunk_4 = blocks_2_mlp_tokens_fc1.chunk(2, dim = -1);  blocks_2_mlp_tokens_fc1 = None
    getitem_8 = chunk_4[0]
    getitem_9 = chunk_4[1];  chunk_4 = None
    blocks_2_mlp_tokens_act = getattr(self.blocks, "2").mlp_tokens.act(getitem_9);  getitem_9 = None
    mul_4 = getitem_8 * blocks_2_mlp_tokens_act;  getitem_8 = blocks_2_mlp_tokens_act = None
    blocks_2_mlp_tokens_drop1 = getattr(self.blocks, "2").mlp_tokens.drop1(mul_4);  mul_4 = None
    blocks_2_mlp_tokens_fc2 = getattr(self.blocks, "2").mlp_tokens.fc2(blocks_2_mlp_tokens_drop1);  blocks_2_mlp_tokens_drop1 = None
    blocks_2_mlp_tokens_drop2 = getattr(self.blocks, "2").mlp_tokens.drop2(blocks_2_mlp_tokens_fc2);  blocks_2_mlp_tokens_fc2 = None
    transpose_6 = blocks_2_mlp_tokens_drop2.transpose(1, 2);  blocks_2_mlp_tokens_drop2 = None
    blocks_2_drop_path = getattr(self.blocks, "2").drop_path(transpose_6);  transpose_6 = None
    add_4 = add_3 + blocks_2_drop_path;  add_3 = blocks_2_drop_path = None
    blocks_2_norm2 = getattr(self.blocks, "2").norm2(add_4)
    blocks_2_mlp_channels_fc1 = getattr(self.blocks, "2").mlp_channels.fc1(blocks_2_norm2);  blocks_2_norm2 = None
    chunk_5 = blocks_2_mlp_channels_fc1.chunk(2, dim = -1);  blocks_2_mlp_channels_fc1 = None
    getitem_10 = chunk_5[0]
    getitem_11 = chunk_5[1];  chunk_5 = None
    blocks_2_mlp_channels_act = getattr(self.blocks, "2").mlp_channels.act(getitem_11);  getitem_11 = None
    mul_5 = getitem_10 * blocks_2_mlp_channels_act;  getitem_10 = blocks_2_mlp_channels_act = None
    blocks_2_mlp_channels_drop1 = getattr(self.blocks, "2").mlp_channels.drop1(mul_5);  mul_5 = None
    blocks_2_mlp_channels_fc2 = getattr(self.blocks, "2").mlp_channels.fc2(blocks_2_mlp_channels_drop1);  blocks_2_mlp_channels_drop1 = None
    blocks_2_mlp_channels_drop2 = getattr(self.blocks, "2").mlp_channels.drop2(blocks_2_mlp_channels_fc2);  blocks_2_mlp_channels_fc2 = None
    blocks_2_drop_path_1 = getattr(self.blocks, "2").drop_path(blocks_2_mlp_channels_drop2);  blocks_2_mlp_channels_drop2 = None
    add_5 = add_4 + blocks_2_drop_path_1;  add_4 = blocks_2_drop_path_1 = None
    blocks_3_norm1 = getattr(self.blocks, "3").norm1(add_5)
    transpose_7 = blocks_3_norm1.transpose(1, 2);  blocks_3_norm1 = None
    blocks_3_mlp_tokens_fc1 = getattr(self.blocks, "3").mlp_tokens.fc1(transpose_7);  transpose_7 = None
    chunk_6 = blocks_3_mlp_tokens_fc1.chunk(2, dim = -1);  blocks_3_mlp_tokens_fc1 = None
    getitem_12 = chunk_6[0]
    getitem_13 = chunk_6[1];  chunk_6 = None
    blocks_3_mlp_tokens_act = getattr(self.blocks, "3").mlp_tokens.act(getitem_13);  getitem_13 = None
    mul_6 = getitem_12 * blocks_3_mlp_tokens_act;  getitem_12 = blocks_3_mlp_tokens_act = None
    blocks_3_mlp_tokens_drop1 = getattr(self.blocks, "3").mlp_tokens.drop1(mul_6);  mul_6 = None
    blocks_3_mlp_tokens_fc2 = getattr(self.blocks, "3").mlp_tokens.fc2(blocks_3_mlp_tokens_drop1);  blocks_3_mlp_tokens_drop1 = None
    blocks_3_mlp_tokens_drop2 = getattr(self.blocks, "3").mlp_tokens.drop2(blocks_3_mlp_tokens_fc2);  blocks_3_mlp_tokens_fc2 = None
    transpose_8 = blocks_3_mlp_tokens_drop2.transpose(1, 2);  blocks_3_mlp_tokens_drop2 = None
    blocks_3_drop_path = getattr(self.blocks, "3").drop_path(transpose_8);  transpose_8 = None
    add_6 = add_5 + blocks_3_drop_path;  add_5 = blocks_3_drop_path = None
    blocks_3_norm2 = getattr(self.blocks, "3").norm2(add_6)
    blocks_3_mlp_channels_fc1 = getattr(self.blocks, "3").mlp_channels.fc1(blocks_3_norm2);  blocks_3_norm2 = None
    chunk_7 = blocks_3_mlp_channels_fc1.chunk(2, dim = -1);  blocks_3_mlp_channels_fc1 = None
    getitem_14 = chunk_7[0]
    getitem_15 = chunk_7[1];  chunk_7 = None
    blocks_3_mlp_channels_act = getattr(self.blocks, "3").mlp_channels.act(getitem_15);  getitem_15 = None
    mul_7 = getitem_14 * blocks_3_mlp_channels_act;  getitem_14 = blocks_3_mlp_channels_act = None
    blocks_3_mlp_channels_drop1 = getattr(self.blocks, "3").mlp_channels.drop1(mul_7);  mul_7 = None
    blocks_3_mlp_channels_fc2 = getattr(self.blocks, "3").mlp_channels.fc2(blocks_3_mlp_channels_drop1);  blocks_3_mlp_channels_drop1 = None
    blocks_3_mlp_channels_drop2 = getattr(self.blocks, "3").mlp_channels.drop2(blocks_3_mlp_channels_fc2);  blocks_3_mlp_channels_fc2 = None
    blocks_3_drop_path_1 = getattr(self.blocks, "3").drop_path(blocks_3_mlp_channels_drop2);  blocks_3_mlp_channels_drop2 = None
    add_7 = add_6 + blocks_3_drop_path_1;  add_6 = blocks_3_drop_path_1 = None
    blocks_4_norm1 = getattr(self.blocks, "4").norm1(add_7)
    transpose_9 = blocks_4_norm1.transpose(1, 2);  blocks_4_norm1 = None
    blocks_4_mlp_tokens_fc1 = getattr(self.blocks, "4").mlp_tokens.fc1(transpose_9);  transpose_9 = None
    chunk_8 = blocks_4_mlp_tokens_fc1.chunk(2, dim = -1);  blocks_4_mlp_tokens_fc1 = None
    getitem_16 = chunk_8[0]
    getitem_17 = chunk_8[1];  chunk_8 = None
    blocks_4_mlp_tokens_act = getattr(self.blocks, "4").mlp_tokens.act(getitem_17);  getitem_17 = None
    mul_8 = getitem_16 * blocks_4_mlp_tokens_act;  getitem_16 = blocks_4_mlp_tokens_act = None
    blocks_4_mlp_tokens_drop1 = getattr(self.blocks, "4").mlp_tokens.drop1(mul_8);  mul_8 = None
    blocks_4_mlp_tokens_fc2 = getattr(self.blocks, "4").mlp_tokens.fc2(blocks_4_mlp_tokens_drop1);  blocks_4_mlp_tokens_drop1 = None
    blocks_4_mlp_tokens_drop2 = getattr(self.blocks, "4").mlp_tokens.drop2(blocks_4_mlp_tokens_fc2);  blocks_4_mlp_tokens_fc2 = None
    transpose_10 = blocks_4_mlp_tokens_drop2.transpose(1, 2);  blocks_4_mlp_tokens_drop2 = None
    blocks_4_drop_path = getattr(self.blocks, "4").drop_path(transpose_10);  transpose_10 = None
    add_8 = add_7 + blocks_4_drop_path;  add_7 = blocks_4_drop_path = None
    blocks_4_norm2 = getattr(self.blocks, "4").norm2(add_8)
    blocks_4_mlp_channels_fc1 = getattr(self.blocks, "4").mlp_channels.fc1(blocks_4_norm2);  blocks_4_norm2 = None
    chunk_9 = blocks_4_mlp_channels_fc1.chunk(2, dim = -1);  blocks_4_mlp_channels_fc1 = None
    getitem_18 = chunk_9[0]
    getitem_19 = chunk_9[1];  chunk_9 = None
    blocks_4_mlp_channels_act = getattr(self.blocks, "4").mlp_channels.act(getitem_19);  getitem_19 = None
    mul_9 = getitem_18 * blocks_4_mlp_channels_act;  getitem_18 = blocks_4_mlp_channels_act = None
    blocks_4_mlp_channels_drop1 = getattr(self.blocks, "4").mlp_channels.drop1(mul_9);  mul_9 = None
    blocks_4_mlp_channels_fc2 = getattr(self.blocks, "4").mlp_channels.fc2(blocks_4_mlp_channels_drop1);  blocks_4_mlp_channels_drop1 = None
    blocks_4_mlp_channels_drop2 = getattr(self.blocks, "4").mlp_channels.drop2(blocks_4_mlp_channels_fc2);  blocks_4_mlp_channels_fc2 = None
    blocks_4_drop_path_1 = getattr(self.blocks, "4").drop_path(blocks_4_mlp_channels_drop2);  blocks_4_mlp_channels_drop2 = None
    add_9 = add_8 + blocks_4_drop_path_1;  add_8 = blocks_4_drop_path_1 = None
    blocks_5_norm1 = getattr(self.blocks, "5").norm1(add_9)
    transpose_11 = blocks_5_norm1.transpose(1, 2);  blocks_5_norm1 = None
    blocks_5_mlp_tokens_fc1 = getattr(self.blocks, "5").mlp_tokens.fc1(transpose_11);  transpose_11 = None
    chunk_10 = blocks_5_mlp_tokens_fc1.chunk(2, dim = -1);  blocks_5_mlp_tokens_fc1 = None
    getitem_20 = chunk_10[0]
    getitem_21 = chunk_10[1];  chunk_10 = None
    blocks_5_mlp_tokens_act = getattr(self.blocks, "5").mlp_tokens.act(getitem_21);  getitem_21 = None
    mul_10 = getitem_20 * blocks_5_mlp_tokens_act;  getitem_20 = blocks_5_mlp_tokens_act = None
    blocks_5_mlp_tokens_drop1 = getattr(self.blocks, "5").mlp_tokens.drop1(mul_10);  mul_10 = None
    blocks_5_mlp_tokens_fc2 = getattr(self.blocks, "5").mlp_tokens.fc2(blocks_5_mlp_tokens_drop1);  blocks_5_mlp_tokens_drop1 = None
    blocks_5_mlp_tokens_drop2 = getattr(self.blocks, "5").mlp_tokens.drop2(blocks_5_mlp_tokens_fc2);  blocks_5_mlp_tokens_fc2 = None
    transpose_12 = blocks_5_mlp_tokens_drop2.transpose(1, 2);  blocks_5_mlp_tokens_drop2 = None
    blocks_5_drop_path = getattr(self.blocks, "5").drop_path(transpose_12);  transpose_12 = None
    add_10 = add_9 + blocks_5_drop_path;  add_9 = blocks_5_drop_path = None
    blocks_5_norm2 = getattr(self.blocks, "5").norm2(add_10)
    blocks_5_mlp_channels_fc1 = getattr(self.blocks, "5").mlp_channels.fc1(blocks_5_norm2);  blocks_5_norm2 = None
    chunk_11 = blocks_5_mlp_channels_fc1.chunk(2, dim = -1);  blocks_5_mlp_channels_fc1 = None
    getitem_22 = chunk_11[0]
    getitem_23 = chunk_11[1];  chunk_11 = None
    blocks_5_mlp_channels_act = getattr(self.blocks, "5").mlp_channels.act(getitem_23);  getitem_23 = None
    mul_11 = getitem_22 * blocks_5_mlp_channels_act;  getitem_22 = blocks_5_mlp_channels_act = None
    blocks_5_mlp_channels_drop1 = getattr(self.blocks, "5").mlp_channels.drop1(mul_11);  mul_11 = None
    blocks_5_mlp_channels_fc2 = getattr(self.blocks, "5").mlp_channels.fc2(blocks_5_mlp_channels_drop1);  blocks_5_mlp_channels_drop1 = None
    blocks_5_mlp_channels_drop2 = getattr(self.blocks, "5").mlp_channels.drop2(blocks_5_mlp_channels_fc2);  blocks_5_mlp_channels_fc2 = None
    blocks_5_drop_path_1 = getattr(self.blocks, "5").drop_path(blocks_5_mlp_channels_drop2);  blocks_5_mlp_channels_drop2 = None
    add_11 = add_10 + blocks_5_drop_path_1;  add_10 = blocks_5_drop_path_1 = None
    blocks_6_norm1 = getattr(self.blocks, "6").norm1(add_11)
    transpose_13 = blocks_6_norm1.transpose(1, 2);  blocks_6_norm1 = None
    blocks_6_mlp_tokens_fc1 = getattr(self.blocks, "6").mlp_tokens.fc1(transpose_13);  transpose_13 = None
    chunk_12 = blocks_6_mlp_tokens_fc1.chunk(2, dim = -1);  blocks_6_mlp_tokens_fc1 = None
    getitem_24 = chunk_12[0]
    getitem_25 = chunk_12[1];  chunk_12 = None
    blocks_6_mlp_tokens_act = getattr(self.blocks, "6").mlp_tokens.act(getitem_25);  getitem_25 = None
    mul_12 = getitem_24 * blocks_6_mlp_tokens_act;  getitem_24 = blocks_6_mlp_tokens_act = None
    blocks_6_mlp_tokens_drop1 = getattr(self.blocks, "6").mlp_tokens.drop1(mul_12);  mul_12 = None
    blocks_6_mlp_tokens_fc2 = getattr(self.blocks, "6").mlp_tokens.fc2(blocks_6_mlp_tokens_drop1);  blocks_6_mlp_tokens_drop1 = None
    blocks_6_mlp_tokens_drop2 = getattr(self.blocks, "6").mlp_tokens.drop2(blocks_6_mlp_tokens_fc2);  blocks_6_mlp_tokens_fc2 = None
    transpose_14 = blocks_6_mlp_tokens_drop2.transpose(1, 2);  blocks_6_mlp_tokens_drop2 = None
    blocks_6_drop_path = getattr(self.blocks, "6").drop_path(transpose_14);  transpose_14 = None
    add_12 = add_11 + blocks_6_drop_path;  add_11 = blocks_6_drop_path = None
    blocks_6_norm2 = getattr(self.blocks, "6").norm2(add_12)
    blocks_6_mlp_channels_fc1 = getattr(self.blocks, "6").mlp_channels.fc1(blocks_6_norm2);  blocks_6_norm2 = None
    chunk_13 = blocks_6_mlp_channels_fc1.chunk(2, dim = -1);  blocks_6_mlp_channels_fc1 = None
    getitem_26 = chunk_13[0]
    getitem_27 = chunk_13[1];  chunk_13 = None
    blocks_6_mlp_channels_act = getattr(self.blocks, "6").mlp_channels.act(getitem_27);  getitem_27 = None
    mul_13 = getitem_26 * blocks_6_mlp_channels_act;  getitem_26 = blocks_6_mlp_channels_act = None
    blocks_6_mlp_channels_drop1 = getattr(self.blocks, "6").mlp_channels.drop1(mul_13);  mul_13 = None
    blocks_6_mlp_channels_fc2 = getattr(self.blocks, "6").mlp_channels.fc2(blocks_6_mlp_channels_drop1);  blocks_6_mlp_channels_drop1 = None
    blocks_6_mlp_channels_drop2 = getattr(self.blocks, "6").mlp_channels.drop2(blocks_6_mlp_channels_fc2);  blocks_6_mlp_channels_fc2 = None
    blocks_6_drop_path_1 = getattr(self.blocks, "6").drop_path(blocks_6_mlp_channels_drop2);  blocks_6_mlp_channels_drop2 = None
    add_13 = add_12 + blocks_6_drop_path_1;  add_12 = blocks_6_drop_path_1 = None
    blocks_7_norm1 = getattr(self.blocks, "7").norm1(add_13)
    transpose_15 = blocks_7_norm1.transpose(1, 2);  blocks_7_norm1 = None
    blocks_7_mlp_tokens_fc1 = getattr(self.blocks, "7").mlp_tokens.fc1(transpose_15);  transpose_15 = None
    chunk_14 = blocks_7_mlp_tokens_fc1.chunk(2, dim = -1);  blocks_7_mlp_tokens_fc1 = None
    getitem_28 = chunk_14[0]
    getitem_29 = chunk_14[1];  chunk_14 = None
    blocks_7_mlp_tokens_act = getattr(self.blocks, "7").mlp_tokens.act(getitem_29);  getitem_29 = None
    mul_14 = getitem_28 * blocks_7_mlp_tokens_act;  getitem_28 = blocks_7_mlp_tokens_act = None
    blocks_7_mlp_tokens_drop1 = getattr(self.blocks, "7").mlp_tokens.drop1(mul_14);  mul_14 = None
    blocks_7_mlp_tokens_fc2 = getattr(self.blocks, "7").mlp_tokens.fc2(blocks_7_mlp_tokens_drop1);  blocks_7_mlp_tokens_drop1 = None
    blocks_7_mlp_tokens_drop2 = getattr(self.blocks, "7").mlp_tokens.drop2(blocks_7_mlp_tokens_fc2);  blocks_7_mlp_tokens_fc2 = None
    transpose_16 = blocks_7_mlp_tokens_drop2.transpose(1, 2);  blocks_7_mlp_tokens_drop2 = None
    blocks_7_drop_path = getattr(self.blocks, "7").drop_path(transpose_16);  transpose_16 = None
    add_14 = add_13 + blocks_7_drop_path;  add_13 = blocks_7_drop_path = None
    blocks_7_norm2 = getattr(self.blocks, "7").norm2(add_14)
    blocks_7_mlp_channels_fc1 = getattr(self.blocks, "7").mlp_channels.fc1(blocks_7_norm2);  blocks_7_norm2 = None
    chunk_15 = blocks_7_mlp_channels_fc1.chunk(2, dim = -1);  blocks_7_mlp_channels_fc1 = None
    getitem_30 = chunk_15[0]
    getitem_31 = chunk_15[1];  chunk_15 = None
    blocks_7_mlp_channels_act = getattr(self.blocks, "7").mlp_channels.act(getitem_31);  getitem_31 = None
    mul_15 = getitem_30 * blocks_7_mlp_channels_act;  getitem_30 = blocks_7_mlp_channels_act = None
    blocks_7_mlp_channels_drop1 = getattr(self.blocks, "7").mlp_channels.drop1(mul_15);  mul_15 = None
    blocks_7_mlp_channels_fc2 = getattr(self.blocks, "7").mlp_channels.fc2(blocks_7_mlp_channels_drop1);  blocks_7_mlp_channels_drop1 = None
    blocks_7_mlp_channels_drop2 = getattr(self.blocks, "7").mlp_channels.drop2(blocks_7_mlp_channels_fc2);  blocks_7_mlp_channels_fc2 = None
    blocks_7_drop_path_1 = getattr(self.blocks, "7").drop_path(blocks_7_mlp_channels_drop2);  blocks_7_mlp_channels_drop2 = None
    add_15 = add_14 + blocks_7_drop_path_1;  add_14 = blocks_7_drop_path_1 = None
    blocks_8_norm1 = getattr(self.blocks, "8").norm1(add_15)
    transpose_17 = blocks_8_norm1.transpose(1, 2);  blocks_8_norm1 = None
    blocks_8_mlp_tokens_fc1 = getattr(self.blocks, "8").mlp_tokens.fc1(transpose_17);  transpose_17 = None
    chunk_16 = blocks_8_mlp_tokens_fc1.chunk(2, dim = -1);  blocks_8_mlp_tokens_fc1 = None
    getitem_32 = chunk_16[0]
    getitem_33 = chunk_16[1];  chunk_16 = None
    blocks_8_mlp_tokens_act = getattr(self.blocks, "8").mlp_tokens.act(getitem_33);  getitem_33 = None
    mul_16 = getitem_32 * blocks_8_mlp_tokens_act;  getitem_32 = blocks_8_mlp_tokens_act = None
    blocks_8_mlp_tokens_drop1 = getattr(self.blocks, "8").mlp_tokens.drop1(mul_16);  mul_16 = None
    blocks_8_mlp_tokens_fc2 = getattr(self.blocks, "8").mlp_tokens.fc2(blocks_8_mlp_tokens_drop1);  blocks_8_mlp_tokens_drop1 = None
    blocks_8_mlp_tokens_drop2 = getattr(self.blocks, "8").mlp_tokens.drop2(blocks_8_mlp_tokens_fc2);  blocks_8_mlp_tokens_fc2 = None
    transpose_18 = blocks_8_mlp_tokens_drop2.transpose(1, 2);  blocks_8_mlp_tokens_drop2 = None
    blocks_8_drop_path = getattr(self.blocks, "8").drop_path(transpose_18);  transpose_18 = None
    add_16 = add_15 + blocks_8_drop_path;  add_15 = blocks_8_drop_path = None
    blocks_8_norm2 = getattr(self.blocks, "8").norm2(add_16)
    blocks_8_mlp_channels_fc1 = getattr(self.blocks, "8").mlp_channels.fc1(blocks_8_norm2);  blocks_8_norm2 = None
    chunk_17 = blocks_8_mlp_channels_fc1.chunk(2, dim = -1);  blocks_8_mlp_channels_fc1 = None
    getitem_34 = chunk_17[0]
    getitem_35 = chunk_17[1];  chunk_17 = None
    blocks_8_mlp_channels_act = getattr(self.blocks, "8").mlp_channels.act(getitem_35);  getitem_35 = None
    mul_17 = getitem_34 * blocks_8_mlp_channels_act;  getitem_34 = blocks_8_mlp_channels_act = None
    blocks_8_mlp_channels_drop1 = getattr(self.blocks, "8").mlp_channels.drop1(mul_17);  mul_17 = None
    blocks_8_mlp_channels_fc2 = getattr(self.blocks, "8").mlp_channels.fc2(blocks_8_mlp_channels_drop1);  blocks_8_mlp_channels_drop1 = None
    blocks_8_mlp_channels_drop2 = getattr(self.blocks, "8").mlp_channels.drop2(blocks_8_mlp_channels_fc2);  blocks_8_mlp_channels_fc2 = None
    blocks_8_drop_path_1 = getattr(self.blocks, "8").drop_path(blocks_8_mlp_channels_drop2);  blocks_8_mlp_channels_drop2 = None
    add_17 = add_16 + blocks_8_drop_path_1;  add_16 = blocks_8_drop_path_1 = None
    blocks_9_norm1 = getattr(self.blocks, "9").norm1(add_17)
    transpose_19 = blocks_9_norm1.transpose(1, 2);  blocks_9_norm1 = None
    blocks_9_mlp_tokens_fc1 = getattr(self.blocks, "9").mlp_tokens.fc1(transpose_19);  transpose_19 = None
    chunk_18 = blocks_9_mlp_tokens_fc1.chunk(2, dim = -1);  blocks_9_mlp_tokens_fc1 = None
    getitem_36 = chunk_18[0]
    getitem_37 = chunk_18[1];  chunk_18 = None
    blocks_9_mlp_tokens_act = getattr(self.blocks, "9").mlp_tokens.act(getitem_37);  getitem_37 = None
    mul_18 = getitem_36 * blocks_9_mlp_tokens_act;  getitem_36 = blocks_9_mlp_tokens_act = None
    blocks_9_mlp_tokens_drop1 = getattr(self.blocks, "9").mlp_tokens.drop1(mul_18);  mul_18 = None
    blocks_9_mlp_tokens_fc2 = getattr(self.blocks, "9").mlp_tokens.fc2(blocks_9_mlp_tokens_drop1);  blocks_9_mlp_tokens_drop1 = None
    blocks_9_mlp_tokens_drop2 = getattr(self.blocks, "9").mlp_tokens.drop2(blocks_9_mlp_tokens_fc2);  blocks_9_mlp_tokens_fc2 = None
    transpose_20 = blocks_9_mlp_tokens_drop2.transpose(1, 2);  blocks_9_mlp_tokens_drop2 = None
    blocks_9_drop_path = getattr(self.blocks, "9").drop_path(transpose_20);  transpose_20 = None
    add_18 = add_17 + blocks_9_drop_path;  add_17 = blocks_9_drop_path = None
    blocks_9_norm2 = getattr(self.blocks, "9").norm2(add_18)
    blocks_9_mlp_channels_fc1 = getattr(self.blocks, "9").mlp_channels.fc1(blocks_9_norm2);  blocks_9_norm2 = None
    chunk_19 = blocks_9_mlp_channels_fc1.chunk(2, dim = -1);  blocks_9_mlp_channels_fc1 = None
    getitem_38 = chunk_19[0]
    getitem_39 = chunk_19[1];  chunk_19 = None
    blocks_9_mlp_channels_act = getattr(self.blocks, "9").mlp_channels.act(getitem_39);  getitem_39 = None
    mul_19 = getitem_38 * blocks_9_mlp_channels_act;  getitem_38 = blocks_9_mlp_channels_act = None
    blocks_9_mlp_channels_drop1 = getattr(self.blocks, "9").mlp_channels.drop1(mul_19);  mul_19 = None
    blocks_9_mlp_channels_fc2 = getattr(self.blocks, "9").mlp_channels.fc2(blocks_9_mlp_channels_drop1);  blocks_9_mlp_channels_drop1 = None
    blocks_9_mlp_channels_drop2 = getattr(self.blocks, "9").mlp_channels.drop2(blocks_9_mlp_channels_fc2);  blocks_9_mlp_channels_fc2 = None
    blocks_9_drop_path_1 = getattr(self.blocks, "9").drop_path(blocks_9_mlp_channels_drop2);  blocks_9_mlp_channels_drop2 = None
    add_19 = add_18 + blocks_9_drop_path_1;  add_18 = blocks_9_drop_path_1 = None
    blocks_10_norm1 = getattr(self.blocks, "10").norm1(add_19)
    transpose_21 = blocks_10_norm1.transpose(1, 2);  blocks_10_norm1 = None
    blocks_10_mlp_tokens_fc1 = getattr(self.blocks, "10").mlp_tokens.fc1(transpose_21);  transpose_21 = None
    chunk_20 = blocks_10_mlp_tokens_fc1.chunk(2, dim = -1);  blocks_10_mlp_tokens_fc1 = None
    getitem_40 = chunk_20[0]
    getitem_41 = chunk_20[1];  chunk_20 = None
    blocks_10_mlp_tokens_act = getattr(self.blocks, "10").mlp_tokens.act(getitem_41);  getitem_41 = None
    mul_20 = getitem_40 * blocks_10_mlp_tokens_act;  getitem_40 = blocks_10_mlp_tokens_act = None
    blocks_10_mlp_tokens_drop1 = getattr(self.blocks, "10").mlp_tokens.drop1(mul_20);  mul_20 = None
    blocks_10_mlp_tokens_fc2 = getattr(self.blocks, "10").mlp_tokens.fc2(blocks_10_mlp_tokens_drop1);  blocks_10_mlp_tokens_drop1 = None
    blocks_10_mlp_tokens_drop2 = getattr(self.blocks, "10").mlp_tokens.drop2(blocks_10_mlp_tokens_fc2);  blocks_10_mlp_tokens_fc2 = None
    transpose_22 = blocks_10_mlp_tokens_drop2.transpose(1, 2);  blocks_10_mlp_tokens_drop2 = None
    blocks_10_drop_path = getattr(self.blocks, "10").drop_path(transpose_22);  transpose_22 = None
    add_20 = add_19 + blocks_10_drop_path;  add_19 = blocks_10_drop_path = None
    blocks_10_norm2 = getattr(self.blocks, "10").norm2(add_20)
    blocks_10_mlp_channels_fc1 = getattr(self.blocks, "10").mlp_channels.fc1(blocks_10_norm2);  blocks_10_norm2 = None
    chunk_21 = blocks_10_mlp_channels_fc1.chunk(2, dim = -1);  blocks_10_mlp_channels_fc1 = None
    getitem_42 = chunk_21[0]
    getitem_43 = chunk_21[1];  chunk_21 = None
    blocks_10_mlp_channels_act = getattr(self.blocks, "10").mlp_channels.act(getitem_43);  getitem_43 = None
    mul_21 = getitem_42 * blocks_10_mlp_channels_act;  getitem_42 = blocks_10_mlp_channels_act = None
    blocks_10_mlp_channels_drop1 = getattr(self.blocks, "10").mlp_channels.drop1(mul_21);  mul_21 = None
    blocks_10_mlp_channels_fc2 = getattr(self.blocks, "10").mlp_channels.fc2(blocks_10_mlp_channels_drop1);  blocks_10_mlp_channels_drop1 = None
    blocks_10_mlp_channels_drop2 = getattr(self.blocks, "10").mlp_channels.drop2(blocks_10_mlp_channels_fc2);  blocks_10_mlp_channels_fc2 = None
    blocks_10_drop_path_1 = getattr(self.blocks, "10").drop_path(blocks_10_mlp_channels_drop2);  blocks_10_mlp_channels_drop2 = None
    add_21 = add_20 + blocks_10_drop_path_1;  add_20 = blocks_10_drop_path_1 = None
    blocks_11_norm1 = getattr(self.blocks, "11").norm1(add_21)
    transpose_23 = blocks_11_norm1.transpose(1, 2);  blocks_11_norm1 = None
    blocks_11_mlp_tokens_fc1 = getattr(self.blocks, "11").mlp_tokens.fc1(transpose_23);  transpose_23 = None
    chunk_22 = blocks_11_mlp_tokens_fc1.chunk(2, dim = -1);  blocks_11_mlp_tokens_fc1 = None
    getitem_44 = chunk_22[0]
    getitem_45 = chunk_22[1];  chunk_22 = None
    blocks_11_mlp_tokens_act = getattr(self.blocks, "11").mlp_tokens.act(getitem_45);  getitem_45 = None
    mul_22 = getitem_44 * blocks_11_mlp_tokens_act;  getitem_44 = blocks_11_mlp_tokens_act = None
    blocks_11_mlp_tokens_drop1 = getattr(self.blocks, "11").mlp_tokens.drop1(mul_22);  mul_22 = None
    blocks_11_mlp_tokens_fc2 = getattr(self.blocks, "11").mlp_tokens.fc2(blocks_11_mlp_tokens_drop1);  blocks_11_mlp_tokens_drop1 = None
    blocks_11_mlp_tokens_drop2 = getattr(self.blocks, "11").mlp_tokens.drop2(blocks_11_mlp_tokens_fc2);  blocks_11_mlp_tokens_fc2 = None
    transpose_24 = blocks_11_mlp_tokens_drop2.transpose(1, 2);  blocks_11_mlp_tokens_drop2 = None
    blocks_11_drop_path = getattr(self.blocks, "11").drop_path(transpose_24);  transpose_24 = None
    add_22 = add_21 + blocks_11_drop_path;  add_21 = blocks_11_drop_path = None
    blocks_11_norm2 = getattr(self.blocks, "11").norm2(add_22)
    blocks_11_mlp_channels_fc1 = getattr(self.blocks, "11").mlp_channels.fc1(blocks_11_norm2);  blocks_11_norm2 = None
    chunk_23 = blocks_11_mlp_channels_fc1.chunk(2, dim = -1);  blocks_11_mlp_channels_fc1 = None
    getitem_46 = chunk_23[0]
    getitem_47 = chunk_23[1];  chunk_23 = None
    blocks_11_mlp_channels_act = getattr(self.blocks, "11").mlp_channels.act(getitem_47);  getitem_47 = None
    mul_23 = getitem_46 * blocks_11_mlp_channels_act;  getitem_46 = blocks_11_mlp_channels_act = None
    blocks_11_mlp_channels_drop1 = getattr(self.blocks, "11").mlp_channels.drop1(mul_23);  mul_23 = None
    blocks_11_mlp_channels_fc2 = getattr(self.blocks, "11").mlp_channels.fc2(blocks_11_mlp_channels_drop1);  blocks_11_mlp_channels_drop1 = None
    blocks_11_mlp_channels_drop2 = getattr(self.blocks, "11").mlp_channels.drop2(blocks_11_mlp_channels_fc2);  blocks_11_mlp_channels_fc2 = None
    blocks_11_drop_path_1 = getattr(self.blocks, "11").drop_path(blocks_11_mlp_channels_drop2);  blocks_11_mlp_channels_drop2 = None
    add_23 = add_22 + blocks_11_drop_path_1;  add_22 = blocks_11_drop_path_1 = None
    norm = self.norm(add_23);  add_23 = None
    mean = norm.mean(dim = 1);  norm = None
    head = self.head(mean);  mean = None
    return head
